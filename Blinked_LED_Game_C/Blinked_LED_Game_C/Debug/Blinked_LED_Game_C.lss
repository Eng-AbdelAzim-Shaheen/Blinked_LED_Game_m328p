
Blinked_LED_Game_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000228  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000228  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800114  00800114  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e6  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c6  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000391  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000015a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a5  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011f  00000000  00000000  00001991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  9e:	0c 94 12 01 	jmp	0x224	; 0x224 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Game>:
#include <util/delay.h>

int x=0;

void Game ()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	64 97       	sbiw	r28, 0x14	; 20
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	int Seg[]={0b1000000,0b1111001,0b0100100,0b0110000,0b0011001,0b0010010,0b0000010,0b1111000,0b0000000,0b0010000};
  ba:	84 e1       	ldi	r24, 0x14	; 20
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <Game+0x1e>
	
	if (x==9 )
  cc:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  d0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  d4:	09 97       	sbiw	r24, 0x09	; 9
  d6:	69 f4       	brne	.+26     	; 0xf2 <Game+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f e3       	ldi	r18, 0x3F	; 63
  da:	8d e0       	ldi	r24, 0x0D	; 13
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <Game+0x38>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Game+0x42>
  e8:	00 00       	nop
	{
		_delay_ms(1000);
		x=0;
  ea:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
  ee:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
  f2:	2f e9       	ldi	r18, 0x9F	; 159
  f4:	86 e8       	ldi	r24, 0x86	; 134
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <Game+0x52>
 100:	00 c0       	rjmp	.+0      	; 0x102 <Game+0x5c>
 102:	00 00       	nop
	//	i=0;
	}
	// i++;
	
	_delay_ms(500);
	if ((PIND & (1<<0)) && (PIND & (1<<1)) && (PIND & (1<<2)) && (PIND & (1<<3)) )
 104:	48 9b       	sbis	0x09, 0	; 9
 106:	06 c0       	rjmp	.+12     	; 0x114 <Game+0x6e>
 108:	49 9b       	sbis	0x09, 1	; 9
 10a:	04 c0       	rjmp	.+8      	; 0x114 <Game+0x6e>
 10c:	4a 9b       	sbis	0x09, 2	; 9
 10e:	02 c0       	rjmp	.+4      	; 0x114 <Game+0x6e>
 110:	4b 99       	sbic	0x09, 3	; 9
 112:	43 c0       	rjmp	.+134    	; 0x19a <Game+0xf4>
	{
	}
	else if ((PIND & (1<<0)) &&  PORTD==(PORTD|(1<<4)))
 114:	48 9b       	sbis	0x09, 0	; 9
 116:	0f c0       	rjmp	.+30     	; 0x136 <Game+0x90>
 118:	9b b1       	in	r25, 0x0b	; 11
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	98 13       	cpse	r25, r24
 120:	0a c0       	rjmp	.+20     	; 0x136 <Game+0x90>
	{
		x++;
 122:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 126:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 130:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 134:	32 c0       	rjmp	.+100    	; 0x19a <Game+0xf4>
	}
	else if ((PIND & (1<<1)) &&  PORTD==(PORTD|(1<<5)))
 136:	49 9b       	sbis	0x09, 1	; 9
 138:	0f c0       	rjmp	.+30     	; 0x158 <Game+0xb2>
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	98 13       	cpse	r25, r24
 142:	0a c0       	rjmp	.+20     	; 0x158 <Game+0xb2>
	{
		x++;
 144:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 148:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 152:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 156:	21 c0       	rjmp	.+66     	; 0x19a <Game+0xf4>
	}
	else if ((PIND & (1<<2)) &&  PORTD==(PORTD|(1<<6)))
 158:	4a 9b       	sbis	0x09, 2	; 9
 15a:	0f c0       	rjmp	.+30     	; 0x17a <Game+0xd4>
 15c:	9b b1       	in	r25, 0x0b	; 11
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 64       	ori	r24, 0x40	; 64
 162:	98 13       	cpse	r25, r24
 164:	0a c0       	rjmp	.+20     	; 0x17a <Game+0xd4>
	{
		x++;
 166:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 16a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 174:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 178:	10 c0       	rjmp	.+32     	; 0x19a <Game+0xf4>
	}
	else if ((PIND & (1<<3)) &&  PORTD==(PORTD|(1<<7)))
 17a:	4b 9b       	sbis	0x09, 3	; 9
 17c:	0e c0       	rjmp	.+28     	; 0x19a <Game+0xf4>
 17e:	9b b1       	in	r25, 0x0b	; 11
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	80 68       	ori	r24, 0x80	; 128
 184:	98 13       	cpse	r25, r24
 186:	09 c0       	rjmp	.+18     	; 0x19a <Game+0xf4>
	{
		x++;
 188:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 18c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 196:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}
	PORTB = Seg[x];
 19a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 19e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__data_end+0x1>
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	8c 0f       	add	r24, r28
 1ac:	9d 1f       	adc	r25, r29
 1ae:	e8 0f       	add	r30, r24
 1b0:	f9 1f       	adc	r31, r25
 1b2:	80 81       	ld	r24, Z
 1b4:	85 b9       	out	0x05, r24	; 5
 1b6:	9f e9       	ldi	r25, 0x9F	; 159
 1b8:	26 e8       	ldi	r18, 0x86	; 134
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	91 50       	subi	r25, 0x01	; 1
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <Game+0x116>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Game+0x120>
 1c6:	00 00       	nop
	_delay_ms(500);
}
 1c8:	64 96       	adiw	r28, 0x14	; 20
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	f8 94       	cli
 1ce:	de bf       	out	0x3e, r29	; 62
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	cd bf       	out	0x3d, r28	; 61
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <main>:

int main(void)
{  //PB3 PB2 PB1 PB0 B3 B2 B1 B0 PORTD
	DDRB=0xFF;
 1da:	8f ef       	ldi	r24, 0xFF	; 255
 1dc:	84 b9       	out	0x04, r24	; 4
	DDRD=0xF0;
 1de:	80 ef       	ldi	r24, 0xF0	; 240
 1e0:	8a b9       	out	0x0a, r24	; 10
	
    while (1) 
    {		
		PORTD |= (1<<4);
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	80 61       	ori	r24, 0x10	; 16
 1e6:	8b b9       	out	0x0b, r24	; 11
		Game();
 1e8:	0e 94 53 00 	call	0xa6	; 0xa6 <Game>
		PORTD &= ~(1<<4);
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	8f 7e       	andi	r24, 0xEF	; 239
 1f0:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<5);
 1f2:	8b b1       	in	r24, 0x0b	; 11
 1f4:	80 62       	ori	r24, 0x20	; 32
 1f6:	8b b9       	out	0x0b, r24	; 11
		Game();
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <Game>
		PORTD &= ~(1<<5);
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<6);
 202:	8b b1       	in	r24, 0x0b	; 11
 204:	80 64       	ori	r24, 0x40	; 64
 206:	8b b9       	out	0x0b, r24	; 11
		Game();
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <Game>
		PORTD &= ~(1<<6);
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	8f 7b       	andi	r24, 0xBF	; 191
 210:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1<<7);
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	80 68       	ori	r24, 0x80	; 128
 216:	8b b9       	out	0x0b, r24	; 11
		Game();
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <Game>
		PORTD &= ~(1<<7);
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	8f 77       	andi	r24, 0x7F	; 127
 220:	8b b9       	out	0x0b, r24	; 11
 222:	df cf       	rjmp	.-66     	; 0x1e2 <main+0x8>

00000224 <_exit>:
 224:	f8 94       	cli

00000226 <__stop_program>:
 226:	ff cf       	rjmp	.-2      	; 0x226 <__stop_program>
